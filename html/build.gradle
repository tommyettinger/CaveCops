buildscript {
	repositories {
		mavenCentral()
		maven { url 'https://jitpack.io' }
	}
	dependencies {
		classpath "com.github.tommyettinger.gretty:gretty:3.0.4.5"
	}
}
apply plugin: "gwt"
apply plugin: "war"
apply plugin: "org.gretty"

gwt {
	gwtVersion = "$gwtFrameworkVersion" // Should match the version used for building the GWT backend. See gradle.properties.
	maxHeapSize = '1G' // Default 256m is not enough for the GWT compiler. GWT is HUNGRY.
	minHeapSize = '1G'

	src = files(file('src/main/java')) // Needs to be in front of "modules" below.
	modules 'com.github.tommyettinger.GdxDefinition'
	devModules 'com.github.tommyettinger.GdxDefinitionSuperdev'
	project.webAppDirName = 'webapp'

	compiler.strict = true
	compiler.disableCastChecking = true
	sourceLevel = 8
}

dependencies {
	implementation project(':core')
	implementation "com.badlogicgames.gdx:gdx:$gdxVersion:sources"

//	implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
//	implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
	implementation 'com.github.tommyettinger:gdx-backend-gwt:1.100.0'
	implementation 'com.github.tommyettinger:gdx-backend-gwt:1.100.0:sources'

	implementation "com.github.yellowstonegames.SquidLib:squidlib-util:$squidLibVersion:sources"
	implementation "com.github.tommyettinger:regexodus:$regExodusVersion:sources"
	implementation "com.github.tommyettinger:colorful:$colorfulVersion:sources"
}


import org.akhikhl.gretty.AppBeforeIntegrationTestTask
import org.wisepersist.gradle.plugins.gwt.GwtSuperDev 

gretty.httpPort = 8080
gretty.resourceBase = project.buildDir.path + "/gwt/draftOut"
gretty.contextPath = "/"
gretty.portPropertiesFileName = "TEMP_PORTS.properties"

task startHttpServer (dependsOn: [draftCompileGwt]) {
	doFirst {
		copy {
			from "webapp"
			into gretty.resourceBase
		}
		copy {
			from "war"
			into gretty.resourceBase
		}
	}
}
task beforeRun(type: AppBeforeIntegrationTestTask, dependsOn: startHttpServer) {
	// The next line allows ports to be reused instead of
	// needing a process to be manually terminated.
	file("build/TEMP_PORTS.properties").delete()
	// Somewhat of a hack; uses Gretty's support for wrapping a task in
	// a start and then stop of a Jetty server that serves files while
	// also running the SuperDev code server.
	integrationTestTask 'superDev'

	interactive false
}

task superDev(type: GwtSuperDev) {
	doFirst {
		gwt.modules = gwt.devModules
	}
}

var outputPath = "../docs/"
task dist(dependsOn: [clean, compileGwt]) {
	doLast {
		file(outputPath).mkdirs()
		copy {
			from("build/gwt/out"){
				exclude '**/*.symbolMap'
			}
			into outputPath
		}
		copy {
			from("webapp") {
				exclude '**/*.html'
				exclude '**/refresh.png'
			}
			into outputPath
		}
		copy {
			from("webapp") {
				include '**/*.html'
				filter { String line -> line.replaceAll('<a class="superdev" .+', '') }
			}
			into outputPath
		}
		copy {
			from "war"
			into outputPath
		}
	}
}

//helps avoid extra (large) cache.js files with gibberish names being stored by the dozen
dist.doFirst {
	delete fileTree(dir:'../docs/html/', include: '**.cache.js')
}


task addSource {
	doLast {
		sourceSets.main.compileClasspath += files(project(':core').sourceSets.main.allJava.srcDirs)
	}
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)

sourceCompatibility = 8
sourceSets.main.java.srcDirs = [ "src/main/java/" ]

eclipse.project.name = appName + "-html"
