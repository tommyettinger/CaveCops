apply plugin: 'application'

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'com.github.tommyettinger.desktop.DesktopLauncher'
sourceCompatibility = 11

dependencies {
  api project(':core')
  api "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
  api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
}

import org.gradle.internal.os.OperatingSystem

run {
	workingDir = rootProject.file('assets').path
	setIgnoreExitValue(true)
	
	if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
		// Required to run LWJGL Java apps on MacOS
		jvmArgs += "-XstartOnFirstThread"
	}
}
jar {
	archiveFileName = "${appName}-Demo.jar"
//	from files(sourceSets.main.output.classesDirs)
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } 
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
}
// creates a slim JDK runtime for distribution
task createRuntime(type: Exec) {
	doFirst() {
		project.delete("${buildDir}/runtime")
	}
	String runtimePath = "${buildDir}/runtime"

	workingDir project.projectDir
	commandLine = [
			"${rootDir}/jpackage/bin/jlink",
			'-p', "${rootDir}/jpackage/jmods",
			'--add-modules', 'java.base,java.desktop,jdk.unsupported',
			'--strip-debug',
			'--no-header-files',
			'--no-man-pages',
			'--strip-native-commands',
			"--vm=server",
			"--compress=2",
			'--output', runtimePath
	]
}

// creates application bundle (executable + runtime)
task jpackage(type: Exec, dependsOn: jar) {
	doFirst() {
		project.delete("${buildDir}/distribution/$project.appName")
	}
	dependsOn createRuntime
	workingDir project.projectDir
	def commands = [
			"${rootDir}/jpackage/bin/jpackage",
			'--dest', "${buildDir}/distribution",
			'--input', "${buildDir}/libs",
			'--name', project.appName,
			'--main-class', project.mainClassName,
			'--main-jar', jar.archiveFile.get().asFile.getName(),
			'--runtime-image', "${buildDir}/runtime"
	]

	if (OperatingSystem.current() == OperatingSystem.WINDOWS) {
		commands << '--icon'
		commands << "${rootDir}/logo.ico"
//		commands << '--java-options'
//		commands << "-splash:splash.png"
	} else if (OperatingSystem.current() == OperatingSystem.LINUX) {
		commands << '--icon'
		commands << "${project.projectDir}/src/main/resources/libgdx64.png"
//		commands << '--java-options'
//		commands << "-splash:splash.png"
	} else if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
		commands << '--icon'
		commands << "${rootDir}/logo.icns"
		commands << '--java-options'
		commands << "-XstartOnFirstThread"
	}

	commandLine = commands
}
