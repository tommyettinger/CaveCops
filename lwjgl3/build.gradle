buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
            classpath "org.beryx:badass-runtime-plugin:1.12.7"
        }
    }
}
if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
    apply plugin: 'org.beryx.runtime'
}
else {
    apply plugin: 'application'
}

sourceSets.main.resources.srcDirs += [rootProject.file('assets').path]
mainClassName = 'com.github.tommyettinger.lwjgl3.Lwjgl3Launcher'
sourceCompatibility = 8

dependencies {
    implementation project(':core')
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

//    compileOnly 'org.graalvm.nativeimage:svm-hosted-native-windows-amd64:22.0.0.2'

//    compileOnly "org.graalvm.nativeimage:svm-hosted-native-windows-amd64:21.0.0.2"
//    implementation 'com.github.anyicomplex:gdx-graalhelper:1.10.0-beta1'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

def os = System.properties['os.name'].toLowerCase()

run {
    workingDir = rootProject.file('assets').path
    setIgnoreExitValue(true)
    if (os.contains('mac')) {
        // Required to run LWJGL3 Java apps on MacOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

jar {
    archiveFileName.set("$appName-Demo.jar")
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    destinationDirectory = file("$project.buildDir/lib")
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
    dependencies {
        exclude('META-INF/INDEX.LIST', 'META-INF/maven/**'
                , 'META-INF/versions/19/**' // may be needed for ProGuard to work
        )
    }
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task proguard(type: proguard.gradle.ProGuardTask) {
    outputs.upToDateWhen { false }
    configuration 'proguard-rules.pro'
    //printmapping 'build/lib/out.map'
    if (System.getProperty('java.version').startsWith('1.')) {
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
//		libraryjars "C:/d/jvm/jdk16-hotspot/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }
    injars "build/lib/${appName}-Demo.jar"
    outjars "build/lib/${appName}.jar"
}

proguard.dependsOn jar

jpackageImage.dependsOn proguard
if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
    jpackageImage.dependsOn jar

    runtime {
        options.set(['--strip-debug',
                     '--compress', '2',
                     '--no-header-files',
                     '--no-man-pages',
                     '--strip-native-commands',
                     '--vm', 'server'])
        modules.set([
                'jdk.unsupported'
        ])
        distDir.set(file(buildDir))
        jpackage {
            imageName = appName
            skipInstaller = true
            jpackageHome = javaHome.getOrElse("")
            mainJar = jar.archiveFileName.get()
            if (os.contains('win')) {
                imageOptions = ["--icon", "icons/logo.ico"]
            } else if (os.contains('nix') || os.contains('nux') || os.contains('bsd')) {
                imageOptions = ["--icon", "icons/logo.png"]
            } else if (os.contains('mac')) {
                imageOptions = ["--icon", "icons/logo.icns", " --java-options", "\"XstartOnFirstThread\""]
            }
        }
    }
}
jpackageImage.doLast {
    file("build/jpackage/CaveCops/app/${appName}-Demo.jar").delete()
}
