buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath "org.beryx:badass-runtime-plugin:1.12.4" // plugin dependencies
	}
}
apply plugin: 'org.beryx.runtime'
apply plugin: 'application'

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'com.github.tommyettinger.lwjgl3.Lwjgl3Launcher'
sourceCompatibility = 8

dependencies {
  implementation project(':core')
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
}

import org.gradle.internal.os.OperatingSystem

run {
	workingDir = rootProject.file('assets').path
	setIgnoreExitValue(true)
	if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
		// Required to run LWJGL3 Java apps on MacOS
		jvmArgs += "-XstartOnFirstThread"
	}
}
jar {
	archiveFileName = "${appName}-Demo.jar"
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	destinationDirectory = file("$project.buildDir/lib")
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
}

task proguard(type: proguard.gradle.ProGuardTask) {
	outputs.upToDateWhen { false }
	configuration 'proguard-rules.pro'
	//printmapping 'build/lib/out.map'
	if (System.getProperty('java.version').startsWith('1.')) {
		libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
	} else {
//		libraryjars "C:/d/jvm/jdk16-hotspot/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
		libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
	}
	injars "build/lib/${appName}-Demo.jar"
	outjars "build/lib/${appName}.jar"
}

proguard.dependsOn jar

jpackageImage.dependsOn proguard

runtime {
	options.set(['--strip-debug',
				 '--compress', '2',
				 '--no-header-files',
				 '--no-man-pages',
				 '--strip-native-commands',
				 '--vm', 'server'])
	modules.set(['java.desktop',
				 'jdk.unsupported'])
	distDir.set(file(buildDir))
	jpackage {
		imageName = 'CaveCops'
		skipInstaller = true
		jpackageHome = javaHome.getOrElse("")
		mainJar = "${appName}.jar"// jar.archiveFileName.get()
		if (OperatingSystem.current() == OperatingSystem.WINDOWS) {
			imageOptions = ["--icon", "../logo.ico"]
		} else if (OperatingSystem.current() == OperatingSystem.LINUX) {
			imageOptions = ["--icon", "../logo.png"]
		} else if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
			imageOptions = ["--icon", "../logo.icns", " --java-options", "\"XstartOnFirstThread\""]
		}
	}
}

jpackageImage.doLast {
	file("build/jpackage/CaveCops/app/${appName}-Demo.jar").delete()
}
